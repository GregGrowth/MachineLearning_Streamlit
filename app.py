import streamlit as st
import pandas as pd
import io
from sections.classification.classification import classification_page
from sections.nailsdetection.nails import nail_page
from sections.regression.regression import regression_page

st.set_page_config(
    page_title="Playground ML",
    page_icon="ðŸ§Š",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.markdown("# Projet Machine Learning ðŸŽˆ")
st.sidebar.markdown("# Main page ðŸŽˆ")

st.sidebar.markdown("# Source de donnÃ©es ðŸŽˆ")

df = pd.DataFrame()

# Options pour choisir la base de donnÃ©es
source_data = st.sidebar.radio(
    "Choisissez votre source de donnÃ©es",
    ["vin.csv", "diabete.csv", "upload file (*.csv)"]
)

if source_data == "vin.csv":
    df = pd.read_csv("./data/vin.csv", index_col=0)  # read a CSV file inside the 'data" folder next to 'app.py'
elif source_data == "diabete.csv":
    df = pd.read_csv("./data/diabete.csv", index_col=0)  # read a CSV file inside the 'data" folder next to 'app.py'
elif source_data == "upload file (*.csv)":
    # Importation du fichier CSV
    st.sidebar.header("Importez vos donnÃ©es")

    # Option pour modifier le sÃ©parateur et le dÃ©cimal du fichier CSV
    separateur = st.sidebar.text_input("Quel est le sÃ©parateur du fichier CSV ?", ",")
    decimal = st.sidebar.text_input("Quel est le dÃ©cimal du fichier CSV ?", ".")

    # TÃ©lechargement du fichier CSV
    uploaded_file = st.sidebar.file_uploader("TÃ©lÃ©chargez votre fichier CSV", type=["csv"])

    # Lire le fichier CSV
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file, sep=separateur, decimal=decimal)

else:
    st.write("Choisissez votre source de donnÃ©es")

# Afficher un aperÃ§u des donnÃ©es
st.subheader("AperÃ§u des donnÃ©es version originale")
st.write(df.head(5))
st.markdown("Votre base de donnÃ©es est de taille ...")
st.markdown("On a dÃ©tecter :")


#########################################
# Ã‰tape 2 : Proposer des options de nettoyage
st.sidebar.markdown("# Nettoyage des donnÃ©es")

st.sidebar.markdown("## Typologie des donnÃ©es")
if st.sidebar.checkbox("Consulter la typologie des donnÃ©es"):
    st.subheader("AperÃ§u des informations sur la base de donnÃ©es")
    buffer = io.StringIO()
    df.info(buf=buffer)
    s = buffer.getvalue()
    st.text(s)

st.sidebar.markdown("## Imputation des donnÃ©es manquantes")
# Option pour supprimer les valeurs manquantes
if st.sidebar.checkbox("Supprimer les lignes avec des valeurs manquantes"):
    data = df.dropna()
    st.write("DonnÃ©es aprÃ¨s suppression des valeurs manquantes :")
    st.write(data.head())

st.sidebar.markdown("## Supression des donnÃ©es")
# Option pour supprimer une colonne
columns = df.columns.tolist()
column_to_drop = st.sidebar.multiselect("SÃ©lectionnez les colonnes Ã  supprimer", columns)
if len(column_to_drop) > 0:
    data = df.drop(columns=column_to_drop)
    st.write(f"DonnÃ©es aprÃ¨s suppression des colonnes {column_to_drop}:")
    st.write(df.head())

st.sidebar.markdown("## Encodage des variables catÃ©gorielles")

st.sidebar.write("Les donnÃ©es sont maintenant prÃªtes Ã  Ãªtre utilisÃ©es pour l'Ã©tape de classification.")


st.sidebar.markdown("# Playground ðŸŽˆ")
type_ml = st.sidebar.radio(
    "Choisissez votre type de playground",
    ["Regression", "Classification", "NailsDetection"]
)

if type_ml == "Regression":
    regression_page()
elif type_ml == "Classification":
    classification_page()
elif type_ml == "NailsDetection":
    nail_page()
else:
    st.write("Choisissez une option")
    