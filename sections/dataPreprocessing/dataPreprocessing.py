import streamlit as st
import pandas as pd
import io


def nettoyageData_page():
    st.title("Nettoyage des donn√©es üéà")

    # V√©rification si des donn√©es sont pr√©sentes
    if 'df' in st.session_state:
        # R√©cup√©ration de la base de donn√©es enregistrer
        df = st.session_state['df']

        # Afficher le nombre de lignes et de colonnes
        st.subheader("Taille de votre base de donn√©es")

        st.write(f"Nombre de lignes : {df.shape[0]}")
        st.write(f"Nombre de colonnes : {df.shape[1]}")

        # Afficher les informations du DataFrame sous forme de tableau
        st.subheader("Informations sur votre base de donn√©es")

        buffer = io.StringIO()
        df.info(buf=buffer)
        s = buffer.getvalue()

        # Parse the df.info() output to extract useful information
        info_data = []
        for line in s.split("\n")[5:-3]:  # Skipping the header and summary
            parts = line.split()
            # Nom de la colonne, Nombre de valeurs non nulles, Type de donn√©es
            info_data.append({
                "Nombre de donn√©es non_null": parts[-3],
                "Type de donn√©es": parts[-1],
                "Quantit√© des donn√©es manquantes": round(((df.shape[0] - int(parts[-3]))/ df.shape[0]) * 100, 3)
            })

        # Create a DataFrame from the extracted info
        df_info = pd.DataFrame(info_data)
        # Add the column names from df.columns as a separate column
        df_info["Nom de la variable"] = df.columns
        # Reorder the columns to match the desired order
        df_info = df_info[["Nom de la variable", "Nombre de donn√©es non_null", "Type de donn√©es", "Quantit√© des donn√©es manquantes"]]

        # Ajout d'une colonne pour la suppression des donn√©es
        df_sup = df_info.copy()
        df_sup['Suppression'] = False

        # Display the DataFrame
        df_sup = st.data_editor(
            df_sup,
            column_config={
                "Nom de la variable": st.column_config.TextColumn(
                    "Nom de la variable",
                    help="Nom de la variable",
                    default="st.",
                    max_chars=50,
                    validate=r"^st\.[a-z_]+$",
                ),
                "Nombre de donn√©es non_null": st.column_config.TextColumn(
                    "Nombre de donn√©es non_null",
                    help="Nombre de donn√©es non_null",
                    default="st.",
                    max_chars=50,
                    validate=r"^st\.[a-z_]+$",
                ),
                "Type de donn√©es": st.column_config.TextColumn(
                    "Type de donn√©es",
                    help="Type de donn√©es",
                    default="st.",
                    max_chars=50,
                    validate=r"^st\.[a-z_]+$",
                ),
                "Quantit√© des donn√©es manquantes": st.column_config.ProgressColumn(
                    "Quantit√© des donn√©es manquantes",
                    help="Pourcentage des donn√©es manquantes",
                    format="%.2f%%",
                    min_value=0,
                    max_value=100,
                ),
                "Suppression": st.column_config.CheckboxColumn(
                    "Supprimer la colonne?",
                    help="Si vous cocher la cellule, la colonne sera supprimer",
                    default=False,
            )
            },
            hide_index=True,
        )

        st.write("Vous pouvez supprimer et n'oubliez pas d'enregistrer vos modifications ! ")

        # Suppression des colonnes coch√©es
        column_to_drop = df_sup["Nom de la variable"][df_sup["Suppression"] == True]
        if len(column_to_drop) > 0:
            df = df.drop(columns=column_to_drop)
            st.markdown("**Aper√ßu des donn√©es :**")
            st.write(df.head(5))
            if st.button("Enregistrer"):
                st.session_state['df'] = df
                st.success("Donn√©es enregistr√©es avec succ√®s!")

        # Etudes de la typologie des donn√©es
        st.subheader("Typologie des donn√©es")
        st.write("V√©rifiez que toutes vos donn√©es sont de type num√©rique pour √©viter la non-compatibilit√© avec certains mod√®les de machine learning.")

        if st.checkbox("Consulter la typologie des donn√©es"):
            st.write("V√©rifiez que la colonne 'Num√©rique' soit coch√© pour chaque variable")
            # Capture info from df into a buffer and extract useful data
            buffer = io.StringIO()
            df.info(buf=buffer)
            s = buffer.getvalue()

            # Parse the df.info() output to extract useful information
            info_data = []
            for line in s.split("\n")[5:-3]:  # Skipping the header and summary
                parts = line.split()
                # Nom de la colonne, Nombre de valeurs non nulles, Type de donn√©es
                info_data.append({
                    "Type de donn√©es": parts[-1]
                })

            # Create a DataFrame from the extracted info
            df_typologie = pd.DataFrame(info_data)
            # Add the column names from df.columns as a separate column
            df_typologie["Nom de la variable"] = df.columns
            # V√©rifier si la colonne est de type num√©rique en utilisant df
            df_typologie["Num√©rique"] = df_typologie["Nom de la variable"].apply(lambda col: pd.api.types.is_numeric_dtype(df[col]))

            # Reorder the columns to match the desired order
            df_typologie = df_typologie[["Nom de la variable", "Type de donn√©es", "Num√©rique"]]

            # Affichage des informations dans un tableau (data_editor)
            st.data_editor(
                df_typologie,
                column_config={
                    "Nom de la variable": st.column_config.TextColumn(
                        "Nom de la variable",
                        help="Nom de la variable",
                    ),
                    "Type de donn√©es": st.column_config.TextColumn(
                        "Type de donn√©es",
                        help="Type de donn√©es pour chaque colonne",
                    ),
                    "Num√©rique": st.column_config.CheckboxColumn(
                        "Num√©rique",
                        help="La variable est-elle de type num√©rique?",
                        disabled=True  # Emp√™che l'utilisateur de modifier la colonne
                    ),
                },
                hide_index=True,
            )

        #############################################################

        # D√©tection des donn√©es manquantes
        st.subheader("Donn√©es manquantes")
        missing_data = df.isnull().sum()
        st.write(f"La base de donn√©es est compos√©e de {missing_data.values.sum()} donn√©es manquantes")
        missing_data = missing_data[missing_data > 0]
        if not missing_data.empty:
            missing_data_df = pd.DataFrame({
                "Nom de la variable": missing_data.index,
                "Nombre de donn√©es manquantes": missing_data.values
            })
            st.write(missing_data_df)
        else:
            st.write("Aucune donn√©e manquante d√©tect√©e.")

        # D√©tection des donn√©es non num√©riques
        st.subheader("Donn√©es non num√©riques")
        categorical_columns = df.select_dtypes(exclude=['number']).columns
        if not categorical_columns.empty:
            categorical_data_df = pd.DataFrame({
                "Nom de la variable": categorical_columns,
                "Type de donn√©es": df[categorical_columns].dtypes.values
            })
            st.write(categorical_data_df)
        else:
            st.write("Aucune donn√©e non num√©rique d√©tect√©e.")

        # Suppression des donn√©es
        st.subheader("Suppression des colonnes")
        columns = df.columns.tolist()
        column_to_drop = st.multiselect("S√©lectionnez les colonnes √† supprimer", columns)
        if len(column_to_drop) > 0:
            data = df.drop(columns=column_to_drop)
            st.write(f"Donn√©es apr√®s suppression des colonnes {column_to_drop}:")
            st.write(data.head())

        # Options de nettoyage
        st.subheader("Imputation des donn√©es manquantes")
        if st.checkbox("Supprimer les lignes avec des valeurs manquantes"):
            data = df.dropna()
            st.write("Donn√©es apr√®s suppression des valeurs manquantes :")
            st.write(data.head())

    else:
        st.write("Aucune donn√©e n'a √©t√© charg√©e. Veuillez charger les donn√©es via la page Source de donn√©es.")